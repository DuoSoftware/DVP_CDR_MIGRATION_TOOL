var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var ObjectId = Schema.ObjectId;

var parameterSchema = new Schema({
    name: {type: String, require: true},
    referenceProperty: {type: String, require: true},
    parameterLocation: {type: String, enum: ['QUERY', 'BODY','PARAMS'], default: 'QUERY'},
    referenceObject: {type: String, enum: ['User', 'Form', 'Grid', 'Custom'], require: true}
});

var responseMapSchema = new Schema({
    accepted_codes: {type: [ {} ], required: true },
    success_msg: { type: String, required: true },
    error_msg: { type: String, required: true },
});

var integrationSchema = new Schema({
    auth_type: {type: String, enum: ['Basic', 'Bearer'], required: false},
    app: { type: ObjectId, ref: 'AppData', required: true },
    token: { type: String, required: false },
    username: { type: String, required: false },
    password: { type: String, required: false },
    url: { type: String, required: true },
    method: { type: String, enum: ['GET', 'POST','PUT', 'DELETE'], required: true },
    parameters: [ parameterSchema ],
    response_map: { type: responseMapSchema, required: false },
    company: { type: Number, required: true },
    tenant: { type: Number, required: true }
});

var actionSchema = new Schema({
    name: { type: String, require: true },
    icon: { type: String, require: false },
    dynamic_form_id: { type: ObjectId, ref: 'FormMaster', required: false },
    integration: { type: ObjectId,ref:Integration, required: true },
});

var appSchema = new Schema({
    name: { type: String, require: true },
    description: { type: String, require: false },
    trycount: { type: Number, required: true, default: 5 },
    timeout: { type: Number, required: true, default: 10 },
    default_integration: { type: ObjectId, ref: 'Integration', required: false },
    actions: [ actionSchema ],
    company: { type: Number, required: true },
    tenant: { type: Number, required: true }
});

actionSchema.pre('remove', function(next) {
    Integration.remove({_id: this.integration}).exec();
    next();
});

appSchema.pre('remove', function(next) {
    Integration.remove({_id: this.default_integration}).exec();
    next();
});

var Integration = mongoose.model('Integration', integrationSchema);
var AppData = mongoose.model('AppData', appSchema);

module.exports.Integration = Integration
module.exports.AppData = AppData;