/**
 * Created by a on 6/3/2016.
 */
var bcrypt = require('bcryptjs');
var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var ObjectId = Schema.ObjectId;


var contactSchema = new Schema({
    contact:String,
    cid:String,
    type:String,
    display: String,
    verified: Boolean
}, {_id: false});


var scopeSchema = new Schema({

    scope: { type: String, required: true},
    feature: String,
    read: Boolean,
    write: Boolean,
    delete: Boolean,

},{_id: false});

var menuScopeSchema = new Schema({

    menuItem: {type: String, required: true},
    menuAction: [scopeSchema]
});


var consoleScopeSchema = new Schema({

    consoleName: {type: String, required: true},
    menus: [menuScopeSchema]

});


var userSchema = new Schema({
    name: String,
    title: String,
    avatar: String,
    systemuser: Boolean,
    birthday: Date,
    Active: Boolean,
    reset: Boolean,
    verified: Boolean,
    joined: Date,
    gender: String,
    address: {
        zipcode: String,
        number: String,
        street: String,
        city: String,
        province: String,
        country: String,
    },
    firstname: String,
    lastname: String,
    multiple: Boolean,
    locale: String,
    username: { type: String, required: true, unique: true },
    ssn:  String,
    password: { type: String, select: false},
    phoneNumber: contactSchema,
    email: contactSchema,
    veeryaccount: contactSchema,
    landnumber: contactSchema,
    facebook: contactSchema,
    twitter: contactSchema,
    linkedin: contactSchema,
    github: contactSchema,
    googleplus: contactSchema,
    allowoutbound: Boolean,
    resourceid: { type: String, unique: true, sparse: true },
    company: { type: Number, required: true },
    tenant: { type: Number, required: true },
    contacts: [contactSchema],
    user_meta: {},
    app_meta: {},
    user_scopes: [scopeSchema],
    client_scopes: [consoleScopeSchema],
    group:{type: ObjectId,ref: 'UserGroup'},
    created_at: Date,
    updated_at: Date,
    security_level: {type: Number},
    multi_login: {type: Boolean, require: true, default: false},
    allow_invitation: {type: Boolean, require: true, default: true},
    allowed_file_categories:[{type: String}],
    auth_mechanism: {type: String, enum : ['facetone','ad','oauth'], default: 'facetone', required: true}
});


userSchema.pre('save', function(next) {
  var user = this;
  if (!user.isModified('password')) {
    return next();
  }
  bcrypt.genSalt(10, function(err, salt) {
    bcrypt.hash(user.password, salt, function(err, hash) {
      user.password = hash;
      next();
    });
  });
});

userSchema.methods.comparePassword = function(password, done) {
  bcrypt.compare(password, this.password, function(err, isMatch) {
    done(err, isMatch);
  });
};





var User = mongoose.model('User', userSchema);
module.exports = User;
module.exports.userSchema = userSchema;
module.exports.scopeSchema = scopeSchema;
module.exports.contactSchema = contactSchema;
module.exports.consoleScopeSchema = consoleScopeSchema;

